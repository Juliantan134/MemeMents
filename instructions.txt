------------------------------ GITHUB ------------------------------

GitHub Workflow for Collaborative Project

This is generated by ChatGPT, padouble check na lang kung tama yung process ng Github Collaboration hahahaha

1. Cloning the Repository

- Clone the repository to your local machine:
  git clone https://github.com/your-org/quiz-app.git
- Navigate to the project directory:
  cd quiz-app

2. Select Your Branch

Each team member works on their respective branch:
- For Abbedja (homepage): 
  git checkout abj-homepage
- For Julian (homepage): 
  git checkout jln-homepage
- For Mikaela (quiz section): 
  git checkout mkl-quiz
- For Denard (quiz section): 
  git checkout dnd-quiz

3. Sync Your Branch with main (Always Get the Latest Code)

Before starting work, always ensure your branch is up to date with main:

- Fetch the latest changes from GitHub:
  git fetch origin
- Merge main into your branch:
  git merge origin/main

Resolve any conflicts if prompted.

4. Add, Commit, and Push Changes

As you make changes, follow these steps regularly:

Stage Changes:
- Add all modified files:
  git add .

Commit Changes:
- Commit your changes with a descriptive message:
  git commit -m "Describe your changes here"

Push Changes:
- Push the changes to your remote branch:
  git push origin <your-branch-name>

Repeat these steps regularly as you work.

5. Create a Pull Request (PR) to main

Once you have significant changes, it's time to merge your branch into main:

- Push your branch to GitHub if you havenâ€™t already:
  git push origin <your-branch-name>

- Go to GitHub and create a Pull Request to merge your branch into main:
  - Click the Compare & Pull Request button.
  - Provide a clear title and description for your changes.
  - Add any reviewers if necessary.
  - Click Create Pull Request.

6. Review and Merge Pull Request

Once your PR is created:
- A team member (or project lead) will review the changes.
- Once approved, they will click Merge Pull Request to merge your changes into main.
- Optionally, delete the feature branch after merging to keep the repo clean.

7. Pull Latest Changes from main

Always keep your branch up-to-date with changes from main:

- Switch to your branch if you're not already on it:
  git checkout <your-branch-name>

- Pull the latest updates from main:
  git pull origin main

Summary of Commands

Cloning the Repository:
git clone https://github.com/your-org/quiz-app.git
cd quiz-app

Switching to Your Branch:
git checkout <your-branch-name>  # e.g., git checkout abj-homepage

Syncing Your Branch with main:
git fetch origin
git merge origin/main

Committing and Pushing Changes:
git add .
git commit -m "Your commit message"
git push origin <your-branch-name>

Creating a Pull Request:
- Push your branch to GitHub.
- Go to GitHub, create a Pull Request to main.

Pulling Latest Changes:
git checkout <your-branch-name>
git pull origin main

Best Practices
- Commit Often: Commit your changes regularly to avoid large commits.
- Write Clear Commit Messages: Descriptive messages make it easier to understand the history.
- Sync Regularly: Frequently pull the latest changes from main to avoid conflicts.
- Review PRs: Always review Pull Requests before merging to ensure quality and consistency.




------------------------------ FILES ------------------------------

There will be provided starting files

index.html  -  Place Homepage Sections here
- Enclose your contents into <section> and class="container" to apply appropriate padding

globalstyles.css  
- All of the global styles will be placed here. Fonts, Sizing, Colors, CSS Reset, container, etc

Create your own CSS Files to style your sections, for Separation of Concerns
- So, each file will have globalstyles and your customstyles (name it properly according to section)
- Your animations will be placed inside your custom CSS file, not on global styles to avoid naming collisions

Add new files if necessary (for CSS and new html files)
Add JS File if necessary for Animations, etc

Place your image assets in the image folder
- Assets for Branding images
- Icons for Icons
- Add new folder for other images (like homepageImages, quizSetImages, easyImages, mediumImages)
- Ensure to rename your image files (para hindi default like Untitled(24).png)






------------------------------ WEBSITE STRUCTURE ------------------------------

HOMEPAGE (index.html)
- Navbar
- Hero
- Statistics
- About/Intro to MemeMents
- Friendly Reminders (paadd na lang @Abbedja)
- Quiz Sets ----------------------------> Corresponding Sets if clicked Play
- Testimonials 
- Call to Action -----------------------> QuizSets.html (iduduplicate lang yung Quiz Sets section into a new html page)
- Footer


QUIZ SETS (EachSet has their own html page)
- Easy     ----------> QuizEvaluation.html  (Iisang quiz evaluation html lang to, ireredirect sila doon and ididisplay dynamically yung score results)
- Medium   ----------> QuizEvaluation.html 
- Hard     ----------> QuizEvaluation.html 
- Extreme  ----------> QuizEvaluation.html 



------------------------------ STYLING ------------------------------


H1 - For Main Title (Per naka png na yata kaya di na needed)
H2 - Header
H3 - Subheader
H4 - Buttons and other prominent texts
P - Paragraphs

You can customize texts accordingly kung di napasama dyan
Like Navbar texts, Links, etc.
Check niyo na lang yung Font Sizing if aling size yung sasakto


MEDIA BREAKPOINTS WILL BE:
- Full for Widescreen
- 800px for Tablet
- 400px for Mobile

Adjust the containers in your CSS File accordingly based sa mga breakpoints
Including Image resize, text centering, etc


MARGINS AND SPACING

- Follow the 4-8-16-32-64-128 Rule for spacing (pwede naman maiba sa ibang scenarios, pero much better if ito yung masusunod)
- We will be using PX as units





------------------------------ GENERAL GUIDELINES ------------------------------

Make sure that you are working in your own branch
Make sure to double check if you have the latest version of main branch
Chat na lang sa GC if may Pull request kayo

Deadline of Frontend will be on Sunday, April 13, Midnight
We can allot extensions, but make sure that all of the major tasks are already done by Sunday to give way for Backend Development
We will have a group meeting on Saturday, 8PM (For Features, Frontend & Backend Discussion)
